// <auto-generated />
using FakeEventGenerator.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FakeEventGenerator.Infrastructure.Migrations
{
    [DbContext(typeof(FakeEventGeneratorDBContext))]
    [Migration("20230814141516_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FakeEventGenerator.Domain.Models.EnvironmentVariable", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Type");

                    b.ToTable("EnvironmentVariable");

                    b.HasData(
                        new
                        {
                            Type = "Degree",
                            Value = 20
                        },
                        new
                        {
                            Type = "Light",
                            Value = 10
                        },
                        new
                        {
                            Type = "Humidity",
                            Value = 20
                        },
                        new
                        {
                            Type = "Sound",
                            Value = 30
                        });
                });

            modelBuilder.Entity("FakeEventGenerator.Domain.Models.PartOfHouse", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Coordinate1X")
                        .HasColumnType("int");

                    b.Property<int>("Coordinate1Y")
                        .HasColumnType("int");

                    b.Property<int>("Coordinate2X")
                        .HasColumnType("int");

                    b.Property<int>("Coordinate2Y")
                        .HasColumnType("int");

                    b.HasKey("Type");

                    b.ToTable("PartOfHouse");

                    b.HasData(
                        new
                        {
                            Type = "House",
                            Coordinate1X = 0,
                            Coordinate1Y = 0,
                            Coordinate2X = 100,
                            Coordinate2Y = 100
                        },
                        new
                        {
                            Type = "LivingRoom",
                            Coordinate1X = 0,
                            Coordinate1Y = 0,
                            Coordinate2X = 30,
                            Coordinate2Y = 30
                        },
                        new
                        {
                            Type = "Kitchen",
                            Coordinate1X = 30,
                            Coordinate1Y = 0,
                            Coordinate2X = 80,
                            Coordinate2Y = 30
                        },
                        new
                        {
                            Type = "Bathroom",
                            Coordinate1X = 80,
                            Coordinate1Y = 0,
                            Coordinate2X = 100,
                            Coordinate2Y = 30
                        },
                        new
                        {
                            Type = "Corridor",
                            Coordinate1X = 0,
                            Coordinate1Y = 30,
                            Coordinate2X = 100,
                            Coordinate2Y = 50
                        },
                        new
                        {
                            Type = "Bedroom1",
                            Coordinate1X = 0,
                            Coordinate1Y = 50,
                            Coordinate2X = 50,
                            Coordinate2Y = 80
                        },
                        new
                        {
                            Type = "Bedroom2",
                            Coordinate1X = 50,
                            Coordinate1Y = 50,
                            Coordinate2X = 100,
                            Coordinate2Y = 80
                        },
                        new
                        {
                            Type = "Balcony",
                            Coordinate1X = 0,
                            Coordinate1Y = 80,
                            Coordinate2X = 100,
                            Coordinate2Y = 100
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
